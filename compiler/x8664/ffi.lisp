(in-package :clcomp)

;; FIXME, ensure 16byte stack aligment
;; use one of registers that C calle preserve
(define-vop %dlsym (res :register) ((c-function-name :register :stack))
  (dolist (reg *c-call-save-registers*)
    (unless (eq reg res)
      (inst :push reg)))
  (unless (eq c-function-name :rdi)
    (inst :mov :rdi c-function-name))
  (inst :push :rbp)
  (inst :mov :rbp :rsp)
  (inst :mov :rax 33565472)
  (inst :call :rax)
  (inst :mov res :RAX)
  (inst :pop :rbp)
  (dolist (reg (reverse *c-call-save-registers*))
    (unless (eq reg res)
      (inst :pop reg))))


;;; all of this VOPs expects that C fun's returns lispobj
(define-vop %c-call-zero-args (res :register) ((c-fun :register :stack))
  (dolist (reg *c-call-save-registers*)
    (unless (eq reg res)
      (inst :push reg)))
  (inst :mov :rax c-fun)
  (inst :push :rbp)
  (inst :mov :rbp :rsp)
  (inst :shr :rax *tag-size*)
  (inst :call :rax)
  (inst :mov res :rax)
  (inst :pop :rbp)
  (dolist (reg (reverse *c-call-save-registers*))
    (unless (eq reg res)
      (inst :pop reg))))

(define-vop %c-call-one-args (res :register) ((c-fun :register :stack)
					      (arg1 :register :stack))
  (dolist (reg *c-call-save-registers*)
    (unless (eq reg res)
      (inst :push reg)))
  (inst :mov :rax c-fun)
  (unless (eq arg1 :rdi)
    (inst :mov :rdi arg1))
  (inst :push :rbp)
  (inst :mov :rbp :rsp)
  (inst :shr :rax *tag-size*)
  (inst :call :rax)
  (inst :mov res :rax)
  (inst :pop :rbp)
  (dolist (reg (reverse *c-call-save-registers*))
    (unless (eq reg res)
      (inst :pop reg))))

(define-vop %c-call-two-args (res :register) ((c-fun :register :stack)
					      (arg1 :register :stack)
					      (arg2 :register :stack))
  (dolist (reg *c-call-save-registers*)
    (unless (eq reg res)
      (inst :push reg)))
  (inst :mov :rax c-fun)
  (unless (eq arg1 :rdi)
    (inst :mov :rdi arg1))
  (unless (eq arg2 :rsi)
    (inst :mov :rsi arg2))
  (inst :push :rbp)
  (inst :mov :rbp :rsp)
  (inst :shr :rax *tag-size*)
  (inst :call :rax)
  (inst :mov res :rax)
  (inst :pop :rbp)
  (dolist (reg (reverse *c-call-save-registers*))
    (unless (eq reg res)
      (inst :pop reg))))

(define-vop %c-call-three-args (res :register) ((c-fun :register :stack)
						(arg1 :register :stack)
						(arg2 :register :stack)
						(arg3 :register :stack))
  (dolist (reg *c-call-save-registers*)
    (unless (eq reg res)
      (inst :push reg)))
  (inst :mov :rax c-fun)
  (unless (eq arg1 :rdi)
    (inst :mov :rdi arg1))
  (unless (eq arg2 :rsi)
    (inst :mov :rsi arg2))
  (unless (eq arg3 :rdx)
    (inst :mov :rdx arg3))
  (inst :push :rbp)
  (inst :mov :rbp :rsp)
  (inst :shr :rax *tag-size*)
  (inst :call :rax)
  (inst :mov res :rax)
  (inst :pop :rbp)
  (dolist (reg (reverse *c-call-save-registers*))
    (unless (eq reg res)
      (inst :pop reg))))


(define-vop %c-call-four-args (res :register) ((c-fun :register :stack)
					       (arg1 :register :stack)
					       (arg2 :register :stack)
					       (arg3 :register :stack)
					       (arg4 :register :stack))
  (dolist (reg *c-call-save-registers*)
    (unless (eq reg res)
      (inst :push reg)))
  (inst :mov :rax c-fun)
  (unless (eq arg1 :rdi)
    (inst :mov :rdi arg1))
  (unless (eq arg2 :rsi)
    (inst :mov :rsi arg2))
  (unless (eq arg3 :rdx)
    (inst :mov :rdx arg3))
  (unless (eq arg4 :rcx)
    (inst :mov :rcx arg3))
  (inst :push :rbp)
  (inst :mov :rbp :rsp)
  (inst :shr :rax *tag-size*)
  (inst :call :rax)
  (inst :mov res :RAX)
  (inst :pop :rbp)
  (dolist (reg (reverse *c-call-save-registers*))
    (unless (eq reg res)
      (inst :pop reg))))





