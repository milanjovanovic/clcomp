(in-package :clcomp)

(define-vop cons (res :register) ((arg1 :register) (arg2 :register))
  (inst :mov res (@ *heap-header-reg*))
  (inst :lea res (@ res nil nil (* 2 *word-size*)))
  (inst :mov (@ *heap-header-reg*) res)
  (inst :lea res (@ res nil nil (- (* 2 *word-size*))))
  (inst :mov (@ res) arg1)
  (inst :mov (@ res nil nil 8) arg2)
  (inst :add res *list-tag*))

#+nil(define-vop car (res :register) ((arg1 :register))
       (let ((not-cons-label (make-vop-label "not-cons"))
	     (done-label (make-vop-label "done")))
	 (inst :lea res (@ arg1 nil nil (- *list-tag*)))
	 (inst :mov *fun-number-of-arguments-reg* res)
	 (inst :test *fun-number-of-arguments-reg* *mask*)
	 (inst :jump-fixup :jne not-cons-label)
	 (inst :mov res (@ res))
	 (inst :jump-fixup :jmp done-label)
	 (inst :label not-cons-label)
	 (inst :mov res *nil*)
	 (inst :label done-label)))

(define-vop car (res :register) ((arg1 :register))
  (inst :mov res (@ arg1 nil nil (- *list-tag*))))

(define-vop rplaca (res :register) ((arg1 :register) (arg2 :register))
  (let ((not-cons-label (make-vop-label "not-cons"))
	(done-label (make-vop-label "done")))
    (inst :lea res (@ arg1 nil nil (- *list-tag*)))
    (inst :mov *fun-number-of-arguments-reg* res)
    (inst :test *fun-number-of-arguments-reg* *mask*)
    (inst :jump-fixup :jne not-cons-label)
    (inst :mov (@ res) arg2)
    (inst :mov res arg2)
    (inst :jump-fixup :jmp done-label)
    (inst :label not-cons-label)
    (inst :mov res *nil*)
    (inst :label done-label)))

#+nil(define-vop cdr (res :register) ((arg1 :register))
       (let ((not-cons-label (make-vop-label "not-cons"))
	     (done-label (make-vop-label "done")))
	 (inst :lea res (@ arg1 nil nil (- *list-tag*)))
	 (inst :mov *fun-number-of-arguments-reg* res)
	 (inst :test *fun-number-of-arguments-reg* *mask*)
	 (inst :jump-fixup :jne not-cons-label)
	 (inst :mov res (@ res nil nil *word-size*))
	 (inst :jump-fixup :jmp done-label)
	 (inst :label not-cons-label)
	 (inst :mov res *nil*)
	 (inst :label done-label)))

(define-vop cdr (res :register) ((arg1 :register))
  (inst :mov res (@ arg1 nil nil (- *word-size* *list-tag*))))

(define-vop rplacd (res :register) ((arg1 :register) (arg2 :register))
  (let ((not-cons-label (make-vop-label "not-cons"))
	(done-label (make-vop-label "done")))
    (inst :lea res (@ arg1 nil nil (- *list-tag*)))
    (inst :mov *fun-number-of-arguments-reg* res)
    (inst :test *fun-number-of-arguments-reg* *mask*)
    (inst :jump-fixup :jne not-cons-label)
    (inst :mov (@ res nil nil *word-size*) arg2)
    (inst :mov res arg2)
    (inst :jump-fixup :jmp done-label)
    (inst :label not-cons-label)
    (inst :mov res *nil*)
    (inst :label done-label)))

(define-vop null (res :register) ((arg :register))
  (let ((eq-label (make-vop-label "eq"))
	(end-label (make-vop-label "end")))
    (inst :cmp arg *nil*)
    (inst :jump-fixup :je eq-label)
    (inst :mov res *nil*)
    (inst :jump-fixup :jmp end-label)
    (inst :label eq-label)
    (inst :mov res *t*)
    (inst :label end-label)))

(define-vop listp (res :register) ((arg :register))
  (let ((list-label (make-vop-label "is-list"))
	(exit-label (make-vop-label "exit")))
    (inst :lea *tmp-reg* (@ arg nil nil (- *list-tag*)))
    (inst :test *tmp-reg* *mask*)
    (inst :jump-fixup :je list-label)
    (inst :mov res *nil*)
    (inst :jump-fixup :jmp exit-label)
    (inst :label list-label)
    (inst :mov res *t*)
    (inst :label exit-label)))


