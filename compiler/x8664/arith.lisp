(in-package :clcomp)

(define-vop fixnump (res :register) ((arg :register))
  (let ((true-label (make-vop-label "true"))
	(exit-label (make-vop-label "exit")))
    (inst :lea *tmp-reg* (@ arg nil nil (- *fixnum-tag*)))
    (inst :test *tmp-reg* *mask*)
    (inst :jump-fixup :je true-label)
    (inst :mov res *nil*)
    (inst :jump-fixup :jmp exit-label)
    (inst :label true-label)
    (inst :mov res *t*)
    (inst :label exit-label)))

(define-vop two-args-+ (res :register) ((arg1 :register) (arg2 :register))
  (inst :mov res arg1)
  (inst :add res arg2))

(define-vop two-args-- (res :register) ((arg1 :register) (arg2 :register))
  (inst :mov res arg1)
  (inst :sub res arg2))

(define-vop two-args-> (res :register) ((arg1 :register) (arg2 :register))
  (let ((greater-label (make-vop-label "greater"))
	(end-label (make-vop-label "end")))
    (inst :cmp arg1 arg2)
    (inst :jump-fixup :jg greater-label)
    (inst :mov res *nil*)
    (inst :jump-fixup :jmp end-label)
    (inst :label greater-label)
    (inst :mov res *t*)
    (inst :label end-label)))

(define-vop two-args-< (res :register) ((arg1 :register) (arg2 :register))
  (let ((less-label (make-vop-label "less"))
	(end-label (make-vop-label "end")))
    (inst :cmp arg1 arg2)
    (inst :jump-fixup :jl less-label)
    (inst :mov res *nil*)
    (inst :jump-fixup :jmp end-label)
    (inst :label less-label)
    (inst :mov res *t*)
    (inst :label end-label)))

(define-vop two-args-= (res :register) ((arg1 :register) (arg2 :register))
  (let ((equal-label (make-vop-label "equal"))
	(end-label (make-vop-label "end")))
    (inst :cmp arg1 arg2)
    (inst :jump-fixup :je equal-label)
    (inst :mov res *nil*)
    (inst :jump-fixup :jmp end-label)
    (inst :label equal-label)
    (inst :mov res *t*)
    (inst :label end-label)))

(define-vop abs (res :register) ((arg1 :register))
  (inst :mov *tmp-reg* arg1)
  (inst :sar *tmp-reg* *tag-size*)
  (inst :sar *tmp-reg* (- (* *word-size* 8) 1))
  (inst :mov res arg1)
  (inst :xor res *tmp-reg*)
  (inst :sub res *tmp-reg*))

(define-vop %neg (res :register) ((arg1 :register))
  (inst :mov res arg1)
  (inst :neg res))

(define-vop two-args-logxor (res :register) ((arg1 :register) (arg2 :register))
  (inst :mov res arg1)
  (inst :xor res arg2))

(define-vop two-args-logand (res :register) ((arg1 :register) (arg2 :register))
  (inst :mov res arg1)
  (inst :and res arg2))

(define-vop two-args-logior (res :register) ((arg1 :register) (arg2 :register))
  (inst :mov res arg1)
  ;; FIXME
  (inst :and res arg2))

(define-vop %fixnum->fixnum-shift-left (res :register) ((arg1 :register) (arg2 :register))
  (inst :push :RCX)
  (inst :mov res arg1)
  (inst :mov :RCX arg2)
  (inst :shr :RCX *tag-size*)
  (inst :shl res :CL)
  (inst :pop :RCX))

(define-vop %fixnum-shift-right (res :register) ((arg1 :register) (arg2 :register))
  (inst :push :RCX)
  (inst :mov res arg1)
  (inst :mov :RCX arg2)
  (inst :shr :RCX *tag-size*)
  (inst :sar res :CL)
  (inst :and res -8)
  (inst :pop :RCX))

(define-vop %fixnum-larger-than-zero (res :register) ((arg1 :register))
  (inst :test arg1 arg1)
  (inst :mov res *nil*)
  (inst :mov *tmp-reg* *t*)
  (inst :cmovnle res *tmp-reg*))

(define-vop %fixnum-less-than-zero (res :register) ((arg1 :register))
  (inst :test arg1 arg1)
  (inst :mov res *nil*)
  (inst :mov *tmp-reg* *t*)
  (inst :cmovs res *tmp-reg*))

(define-vop %imul (res :register) ((arg1 :register) (arg2 :register :stack))
  (inst :mov res arg1)
  (inst :sar res *tag-size*)
  (inst :mov *tmp-reg* arg2)
  (inst :sar *tmp-reg* *tag-size*)
  (inst :imul res arg2)
  (inst :shl res *tag-size*))

;;; FIXME
(define-vop %fixnum-evenp (res :register) ((arg :register :stack))
  (let ((even-label (make-vop-label "even-label-"))
	(end-label (make-vop-label "end-label-")))
    (inst :test arg 8)
    (inst :jump-fixup :je even-label)
    (inst :mov res *nil*)
    (inst :jump-fixup :jmp end-label)
    (inst :label even-label)
    (inst :mov res *t*)
    (inst :label end-label)))

(define-vop %fixnum-fixnum-remainder (res :register) ((arg1 :register :stack) (arg2 :register))
  (inst :push :rax)
  (inst :push :rdx)
  (inst :mov :rax arg1)
  (inst :cqo)
  (inst :idiv :rax arg2)
  (inst :mov res :rdx)
  (inst :pop :rdx)
  (inst :pop :rax))

(define-vop %fixnum-fixnum-quotient (res :register) ((arg1 :register :stack) (arg2 :register))
  (inst :push :rax)
  (inst :push :rdx)
  (inst :mov :rax arg1)
  (inst :cqo)
  (inst :idiv :rax arg2)
  (inst :mov res :rax)
  (inst :sar res *tag-size*)
  (inst :pop :rdx)
  (inst :pop :rax))
